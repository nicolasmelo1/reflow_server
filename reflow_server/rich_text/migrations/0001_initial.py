# Generated by Django 3.1 on 2020-10-16 19:59

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='TextAlignmentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('order', models.BigIntegerField(default=1)),
            ],
            options={
                'db_table': 'text_alignment_type',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='TextBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.BigIntegerField(default=1)),
            ],
            options={
                'db_table': 'text_block',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='TextBlockType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('is_primitive', models.BooleanField(default=False)),
                ('order', models.BigIntegerField(default=1)),
            ],
            options={
                'db_table': 'text_block_type',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='TextImageOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size_relative_to_view', models.BigIntegerField(default=100)),
            ],
            options={
                'db_table': 'text_image_option',
            },
        ),
        migrations.CreateModel(
            name='TextListType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('order', models.BigIntegerField(default=1)),
            ],
            options={
                'db_table': 'text_list_type',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='TextPage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('raw_text', models.TextField(blank=True, null=True)),
                ('markdown_text', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'text_page',
            },
        ),
        migrations.CreateModel(
            name='TextTableOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rows_num', models.BigIntegerField(default=1)),
                ('columns_num', models.BigIntegerField(default=1)),
                ('border_color', models.CharField(max_length=150)),
            ],
            options={
                'db_table': 'text_table_option',
            },
        ),
        migrations.CreateModel(
            name='TextTextOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alignment_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rich_text.textalignmenttype')),
            ],
            options={
                'db_table': 'text_text_option',
            },
        ),
        migrations.CreateModel(
            name='TextListOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('list_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rich_text.textlisttype')),
            ],
            options={
                'db_table': 'text_list_option',
            },
        ),
        migrations.CreateModel(
            name='TextContent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.BigIntegerField(default=1)),
                ('text', models.TextField(blank=True, null=True)),
                ('is_bold', models.BooleanField(default=False)),
                ('is_italic', models.BooleanField(default=False)),
                ('is_underline', models.BooleanField(default=False)),
                ('is_code', models.BooleanField(default=False)),
                ('latex_equation', models.TextField()),
                ('marker_color', models.CharField(max_length=150)),
                ('text_color', models.CharField(max_length=150)),
                ('block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rich_text.textblock')),
            ],
            options={
                'db_table': 'text_content',
                'ordering': ('order',),
            },
        ),
        migrations.CreateModel(
            name='TextBlockTypeCanContainType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='text_block_type_can_contain_block', to='rich_text.textblocktype')),
                ('contain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='text_block_type_can_contain', to='rich_text.textblocktype')),
            ],
            options={
                'db_table': 'text_block_type_can_contain_type',
            },
        ),
        migrations.AddField(
            model_name='textblock',
            name='block_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='rich_text.textblocktype'),
        ),
        migrations.AddField(
            model_name='textblock',
            name='depends_on',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='rich_text_depends_on_blocks', to='rich_text.textblock'),
        ),
        migrations.AddField(
            model_name='textblock',
            name='image_option',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='rich_text.textimageoption'),
        ),
        migrations.AddField(
            model_name='textblock',
            name='list_option',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='rich_text.textlistoption'),
        ),
        migrations.AddField(
            model_name='textblock',
            name='page',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rich_text_page_blocks', to='rich_text.textpage'),
        ),
        migrations.AddField(
            model_name='textblock',
            name='table_option',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='rich_text.texttableoption'),
        ),
        migrations.AddField(
            model_name='textblock',
            name='text_option',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='rich_text.texttextoption'),
        ),
    ]
