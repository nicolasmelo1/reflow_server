# Generated by Django 3.1.4 on 2021-02-13 21:38

from reflow_server.billing.managers import discount_by_individual_name_for_company
from django.db import migrations
from django.db import transaction


@transaction.atomic
def migrate_company_charge(apps, schema_editor):
    Company = apps.get_model('authentication', 'Company')
    CurrentCompanyCharge = apps.get_model('billing', 'CurrentCompanyCharge')
    IndividualChargeValueType = apps.get_model('billing', 'IndividualChargeValueType')
    DiscountByIndividualValueQuantity = apps.get_model('billing', 'DiscountByIndividualValueQuantity')

    def get_discount_by_individual_charge_value_type_and_quantity(individual_charge_value_type_id, quantity):
        return DiscountByIndividualValueQuantity.objects.filter(
            individual_charge_value_type_id=individual_charge_value_type_id, 
            quantity__lte=quantity
        ).order_by('-quantity').first()

    all_current_companies_charges = CurrentCompanyCharge.objects.all()
    all_individual_charge_value_type = IndividualChargeValueType.objects.all()   
    company_charges_ids_to_remove_after = list(all_current_companies_charges.values_list('id', flat=True))
    company_charges_reference = {}
    individual_charge_default_quantity_reference = {}
    for individual_charge_value_type in all_individual_charge_value_type:
        individual_charge_default_quantity_reference[individual_charge_value_type.id] = individual_charge_value_type.default_quantity
    for current_company_charge in all_current_companies_charges:
        company_charges_reference[current_company_charge.company_id] = company_charges_reference.get(current_company_charge.company_id, {})
        company_charges_reference[current_company_charge.company_id][current_company_charge.individual_charge_value_type.id] = \
            {
                'quantity': current_company_charge.quantity,
                'discount_by_individual_value_id': current_company_charge.discount_by_individual_value_id
            }
    for company in Company.objects.all():
        individual_charge_value_ids_to_add = [individual_charge_type_id for individual_charge_type_id in individual_charge_default_quantity_reference.keys() if individual_charge_type_id not in company_charges_reference.get(company.id, {}).keys()]

        if company_charges_reference.get(company.id, None):
            for existing_individual_charge_value_type_id in company_charges_reference[company.id].keys():
                CurrentCompanyCharge.objects.create(
                    company_id=company.id,
                    individual_charge_value_type_id=existing_individual_charge_value_type_id,
                    quantity=company_charges_reference[company.id][existing_individual_charge_value_type_id]['quantity'],
                    discount_by_individual_value_id=company_charges_reference[company.id][existing_individual_charge_value_type_id]['discount_by_individual_value_id']
                )
        for non_existing_individual_charge_value_type_id in individual_charge_value_ids_to_add:
            CurrentCompanyCharge.objects.create(
                company_id=company.id,
                individual_charge_value_type_id=non_existing_individual_charge_value_type_id,
                quantity=individual_charge_default_quantity_reference[non_existing_individual_charge_value_type_id],
                discount_by_individual_value=get_discount_by_individual_charge_value_type_and_quantity(non_existing_individual_charge_value_type_id, individual_charge_default_quantity_reference[non_existing_individual_charge_value_type_id])
            )
    CurrentCompanyCharge.objects.filter(id__in=company_charges_ids_to_remove_after).delete()


class Migration(migrations.Migration):

    dependencies = [
        ('billing', '0012_auto_20210126_2029'),
    ]

    operations = [
        migrations.RunPython(migrate_company_charge)
    ]
